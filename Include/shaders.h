#ifndef __SEMAPHORE_SHADER__
#define __SEMAPHORE_SHADER__

const char * const semaphore_shader =
"struct VOut{\n"
"    float4 pos : SV_POSITION;\n"
"    float2 uv : TEXCOORD0;\n"
"};\n"
"Texture2D Depth : register(t0);\n"
"Texture2D Color : register(t1);\n"
"sampler Sampler : register(s0);\n"
"VOut VShader(float4 position : POSITION){\n"
"    VOut output;\n"
"    output.pos = position;\n"
"    output.uv.x = (position.x*0.5)+0.5;\n"
"    output.uv.y = (position.y*-0.5)+0.5;\n"
"    return output;\n"
"}\n"
"static const float3x3 kernel =\n"
"{\n"
"    0.0625f,  0.125f, 0.0625f,\n"
"    0.125f,   0.25f,  0.125f,\n"
"    0.0625f,  0.125f, 0.0625f\n"
"};\n"
"float3 convolute(float2 pos, float2 radius){\n"
"    float3 t[9];\n"
"    t[0] = Color.Sample( Sampler, float2(pos.x-radius.x, pos.y-radius.y)).rgb;\n" 
"    t[1] = Color.Sample( Sampler, float2(pos.x, pos.y-radius.y)).rgb;\n" 
"    t[2] = Color.Sample( Sampler, float2(pos.x+radius.x, pos.y-radius.y)).rgb;\n"
"    t[3] = Color.Sample( Sampler, float2(pos.x-radius.x, pos.y)).rgb;\n"
"    t[4] = Color.Sample( Sampler, float2(pos.x, pos.y)).rgb;\n"
"    t[5] = Color.Sample( Sampler, float2(pos.x+radius.x, pos.y)).rgb;\n"
"    t[6] = Color.Sample( Sampler, float2(pos.x-radius.x, pos.y+radius.y)).rgb;\n" 
"    t[7] = Color.Sample( Sampler, float2(pos.x, pos.y+radius.y)).rgb;\n" 
"    t[8] = Color.Sample( Sampler, float2(pos.x+radius.x, pos.y+radius.y)).rgb;\n"
"    return kernel[0][0]*t[0] + kernel[0][1]*t[1] + kernel[0][2]*t[2] +\n"
"           kernel[1][0]*t[3] + kernel[1][1]*t[4] + kernel[1][2]*t[5] +\n"
"           kernel[2][0]*t[6] + kernel[2][1]*t[7] + kernel[2][2]*t[8];\n"
"}\n"
"float4 PShader(VOut input) : SV_TARGET{\n"
"	 float depth = Depth.Sample( Sampler, input.uv ).r;\n"
"	 float2 radius = float2(1.0/1920.0f, 1.0f/1080.0f);\n"
"	 //float radius = depth*0.005f;\n"
"    float3 color = convolute(input.uv, radius);\n"
"    return float4(color.r, color.g, color.b, 1.0);\n"
"}";
#endif //__SEMAPHORE_SHADER__